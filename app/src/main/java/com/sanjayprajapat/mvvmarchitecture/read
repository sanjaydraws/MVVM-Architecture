
MVVM


viewmodelscope
livedata
mutablelivedata

mediator live dATA ->
When we're in a ViewModel, we don't want to observeLiveData instances
(and we can't because we have no LifecycleOwner around). However, we might want to
react to them, or even combine (and mediate) multiple LiveData objects. For those
situations, MediatorLiveData is what we're looking for.

While the MediatorLiveData is a subclass of LiveData, it acts as LiveData itself.
It allows us to merge multiple LiveData sources into one single LiveData which we then can observe.


Transformation:This class provides three static methods: map, switchMap and distinctUntilChanged
map : Transforms the value of LiveDatainto another value
SwitchMap:-> transform all the values of the triple into one single LiveData source
distinctUntilChanged -> Filters LiveData so that values will not be emitted unless they have changed
ex: . If we’re listening for the names of all players, we don’t want to update the UI when the score changes.


what are lifecycle-aware-components


How does it work



what are lifecycleowner &
LifecycleOwner(can call any Activity/Fragment)

Activity Has Lifecycle when comes to archietecture component we have
Lifecycle class (Which uses Event and State to determine the Lifecycle of LifeCyleOwner)
Eache event has own state, EACH EVENT IS TO PAarticular state
  onCreate()  ->CREATED
  onStart()-> STARTED
  onPause()->  PAUSED
  onResume() -> RESUMED
  onDestroy()-> DESTROYED
  onStop()-> STOPPED

Lifecycle class - holds info about lifecycle of LifecycleOwner
lifecycle object uses following enumeration to track lifecycle status

LIFECYCLEOWNER -> provide lifecycle status to lifecycl-aware-components
lifecycleObserver -> it register lifecycle status to respond and perform action

LifecycleObserver -> which observes this activity,and keep track of it's lifecycle
LifecycleObserver perform action and action performed by this lifecycleObserver
depends on the lifecycle of lifecycle owner


Handling Lifecycles with Lifecycle-Aware Components
it perform action in when change the lifecycle status of component such as activities and fragments
Lifecycles are managed by the operating system or the framework code running in your process.


activity and observer
 D/MAInACT: onCreate: OWNER
 D/MAInACT: onCreate: OBSERVER androidx.lifecycle.LifecycleRegistry@9bfa842
 D/MAInACT: onStart: Owner
 D/MAInACT: onStart: OBSERVER androidx.lifecycle.LifecycleRegistry@9bfa842
 D/MAInACT: onResume: Owner
 D/MAInACT: onResume: OBSERVER androidx.lifecycle.LifecycleRegistry@9bfa842



when lock app , when app is visible , goes in background
D/MAInACT: onPause: OBSERVER androidx.lifecycle.LifecycleRegistry@9bfa842
D/MAInACT: onPause: Owner
D/MAInACT: onStop: OBSERVER androidx.lifecycle.LifecycleRegistry@9bfa842
D/MAInACT: onStop: Owner

when open lock app ,
D/MAInACT: onStart: Owner
D/MAInACT: onStart: OBSERVER androidx.lifecycle.LifecycleRegistry@9bfa842
D/MAInACT: onResume: Owner
D/MAInACT: onResume: OBSERVER androidx.lifecycle.LifecycleRegistry@9bfa842

when kill app
onDestroy: OBSERVER androidx.lifecycle.LifecycleRegistry@9bfa842
D/MAInACT: onDestroy: Owner


viewmodelscope -> A ViewModelScope is defined for each ViewModel in your app.
Any coroutine launched in this scope is automatically canceled if the ViewModel is cleared
Coroutines are useful here for when you have work that needs to be done only if the ViewModel is active.


ViewModels (VMs)-> are independent of configuration changes and are cleared when activity/fragment is destroyed(onCleared call)






======================================================
Activity lifecycle
Activity created  -> onCreate(), onStart(), onResume()

ActivityRotated -> onPause(), onStop(), onDestroy(),
                   onCreate(), onStart(), onResume()

finish() -> onPause(),onStop(),onDestroy ,OnCleared() of view model


=====================================================
Dispatchers->Dispatchers help coroutines in deciding the thread on which the work has to be done.
Dispatchers.Main - for change ui on  ui/main thres
Dispatchers.IO -> networking, reading, or writing from the database, reading, or writing to the files eg: Fetching data from the database is an IO operation, which is done on the IO thread.
Dispatchers.Default -> when want to do complex and long running task which will freeze ui
Dispatchers.Unconfined


coroutine starts in specific context, this context describes which thread
coroutine will be started. can be start coroutine using GlobalScope withous passing  any parameters


GlobalScope() ->A global CoroutineScope not bound to any job.
 Global scope is used to launch top-level coroutines which are operating
  on the whole application lifetime and are not cancelled prematurely.



GlobalScope - biggest problem with globalscope
GlobalScope is that the coroutine can very easily be leaked. So when you think GlobalScope, don’t think blocking main thread bad




Observable Comparison ->



LiveData ->
StateFlow -> it holds to  the state, set a inititial value can'not be null
StateFlow can do little bit more ,with stateflow we have powerfull operator(live data can't)
can map the result ,filter them  it uses coroutine , testing capabilities are great with coroutine
can be transform the result before observing
stateflow will remain active in background , stateFlow will inactive in background
stateFlow is HotFlows
example -> if show toast on collect, if again triggered stateFlow , if value is same ,it will not emit same value again, toast will not be shown
if rotate activity, it will automatically emit value  if activity recreated
 that's why  sharedFlow used(send one time data that doesn't remitted) on screen rotation



HotFlows -> keep emiting values even there are no collectors
coldflows -> it would not anything ,even if there are not collectors

Flow ->it doesn't hold values, normal flow doesn't contains state (when rotate activity data goes on previous state)
to emit value multiple period of time

SharedFlow ->  doesn't provide initial value
-> also Hotflow
-> they will send event or data even if there are no collectors
-> more used to send one time event






